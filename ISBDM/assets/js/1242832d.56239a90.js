"use strict";(self.webpackChunkstandards_dev=self.webpackChunkstandards_dev||[]).push([[6765],{44339:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/TEST-IMPROVEMENTS-GUIDE","title":"Test Improvements Guide","description":"This guide documents the improvements made to the ISBDM test suite to address issues where tests were \\"cheating\\" by hardcoding responses or testing mocks instead of actual functionality.","source":"@site/docs/development/TEST-IMPROVEMENTS-GUIDE.md","sourceDirName":"development","slug":"/development/TEST-IMPROVEMENTS-GUIDE","permalink":"/standards-dev/ISBDM/docs/development/TEST-IMPROVEMENTS-GUIDE","draft":false,"unlisted":false,"editUrl":"https://github.com/iflastandards/ISBDM/tree/main/docs/development/TEST-IMPROVEMENTS-GUIDE.md","tags":[],"version":"current","lastUpdatedBy":"Jon Phipps","lastUpdatedAt":1751318933000,"frontMatter":{}}');var i=s(23420),r=s(65404);const l={},a="Test Improvements Guide",o={},d=[{value:"Key Issues Identified",id:"key-issues-identified",level:2},{value:"Improvements Made",id:"improvements-made",level:2},{value:"1. Vocabulary Creation Tests",id:"1-vocabulary-creation-tests",level:3},{value:"2. VocabularyTable Tests",id:"2-vocabularytable-tests",level:3},{value:"3. ElementReference Tests",id:"3-elementreference-tests",level:3},{value:"4. InLink Tests",id:"4-inlink-tests",level:3},{value:"5. Google Sheets Integration Tests",id:"5-google-sheets-integration-tests",level:3},{value:"Best Practices for Future Tests",id:"best-practices-for-future-tests",level:2},{value:"1. Test Real Behavior, Not Mocks",id:"1-test-real-behavior-not-mocks",level:3},{value:"2. Test Business Logic Separately",id:"2-test-business-logic-separately",level:3},{value:"3. Test Edge Cases",id:"3-test-edge-cases",level:3},{value:"4. Test Integration Points",id:"4-test-integration-points",level:3},{value:"5. Test Performance",id:"5-test-performance",level:3},{value:"Running the Improved Tests",id:"running-the-improved-tests",level:2},{value:"Measuring Test Quality",id:"measuring-test-quality",level:2},{value:"Migration Strategy",id:"migration-strategy",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"test-improvements-guide",children:"Test Improvements Guide"})}),"\n",(0,i.jsx)(n.p,{children:'This guide documents the improvements made to the ISBDM test suite to address issues where tests were "cheating" by hardcoding responses or testing mocks instead of actual functionality.'}),"\n",(0,i.jsx)(n.h2,{id:"key-issues-identified",children:"Key Issues Identified"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Over-mocking"}),": Tests mocked core functionality they were supposed to test"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hardcoded Values"}),": Tests checked for exact strings that mirrored implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing Mocks"}),": Tests verified mock calls instead of actual behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing Edge Cases"}),": No tests for errors, empty data, or invalid inputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Integration Testing"}),": Components tested in isolation without framework integration"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"improvements-made",children:"Improvements Made"}),"\n",(0,i.jsx)(n.h3,{id:"1-vocabulary-creation-tests",children:"1. Vocabulary Creation Tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"}),": Tests only verified that mocks were called with certain parameters\n",(0,i.jsx)(n.strong,{children:"After"}),": Tests validate actual business logic:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Column generation logic for different profiles"}),"\n",(0,i.jsx)(n.li,{children:"Vocabulary name validation patterns"}),"\n",(0,i.jsx)(n.li,{children:"URL generation algorithms"}),"\n",(0,i.jsx)(n.li,{children:"Configuration validation rules"}),"\n",(0,i.jsx)(n.li,{children:"Error handling scenarios"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-vocabularytable-tests",children:"2. VocabularyTable Tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"}),": Hardcoded ",(0,i.jsx)(n.code,{children:"colorMode: 'light'"}),", never tested dark mode\n",(0,i.jsx)(n.strong,{children:"After"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests both light and dark mode rendering"}),"\n",(0,i.jsx)(n.li,{children:"Validates filtering logic across languages"}),"\n",(0,i.jsx)(n.li,{children:"Tests performance with large datasets"}),"\n",(0,i.jsx)(n.li,{children:"Handles special characters and XSS prevention"}),"\n",(0,i.jsx)(n.li,{children:"Tests edge cases (empty data, missing translations)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-elementreference-tests",children:"3. ElementReference Tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"}),": Tested for exact hardcoded URI strings\n",(0,i.jsx)(n.strong,{children:"After"}),": Tests the actual URI generation logic:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prefix determination based on element type"}),"\n",(0,i.jsx)(n.li,{children:"Type normalization (Class \u2192 C prefix, Property \u2192 P prefix)"}),"\n",(0,i.jsx)(n.li,{children:"Relationship processing (elementSuperType \u2192 subPropertyOf)"}),"\n",(0,i.jsx)(n.li,{children:"RDF serialization logic for different formats"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-inlink-tests",children:"4. InLink Tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"}),": Mocked both ",(0,i.jsx)(n.code,{children:"useBaseUrl"})," and ",(0,i.jsx)(n.code,{children:"Link"})," component\n",(0,i.jsx)(n.strong,{children:"After"}),": Tests actual functionality:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Smart wrapping logic implementation"}),"\n",(0,i.jsx)(n.li,{children:"Zero-width space insertion algorithm"}),"\n",(0,i.jsx)(n.li,{children:"URL processing with different formats"}),"\n",(0,i.jsx)(n.li,{children:"Performance with large text and deep nesting"}),"\n",(0,i.jsx)(n.li,{children:"Accessibility implications"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-google-sheets-integration-tests",children:"5. Google Sheets Integration Tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"New"}),": Added comprehensive tests for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Service account authentication parsing"}),"\n",(0,i.jsx)(n.li,{children:"Spreadsheet operation request building"}),"\n",(0,i.jsx)(n.li,{children:"Workbook naming and search query construction"}),"\n",(0,i.jsx)(n.li,{children:"Index sheet hyperlink formula generation"}),"\n",(0,i.jsx)(n.li,{children:"Data transformation for multilingual vocabularies"}),"\n",(0,i.jsx)(n.li,{children:"Batch operation chunking"}),"\n",(0,i.jsx)(n.li,{children:"Error recovery and rate limiting"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-future-tests",children:"Best Practices for Future Tests"}),"\n",(0,i.jsx)(n.h3,{id:"1-test-real-behavior-not-mocks",children:"1. Test Real Behavior, Not Mocks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// \u274c Bad: Testing mock was called\nexpect(mockFunction).toHaveBeenCalledWith(expectedArgs);\n\n// \u2705 Good: Testing actual output\nconst result = processData(input);\nexpect(result).toEqual(expectedOutput);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-test-business-logic-separately",children:"2. Test Business Logic Separately"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good: Test the logic function directly\nconst generateUri = (base: string, prefix: string, id: number) => {\n  return `${base}/${prefix}${id}`;\n};\n\nexpect(generateUri('http://example.com', 'P', 123))\n  .toBe('http://example.com/P123');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-test-edge-cases",children:"3. Test Edge Cases"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good: Test various edge cases\ndescribe('validation', () => {\n  it('handles empty input', () => {});\n  it('handles null values', () => {});\n  it('handles special characters', () => {});\n  it('handles maximum length', () => {});\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-test-integration-points",children:"4. Test Integration Points"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good: Test how components work together\nit('should process URL and apply smart wrapping together', () => {\n  // Test that multiple features work correctly when combined\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-test-performance",children:"5. Test Performance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good: Ensure reasonable performance\nit('should handle large datasets efficiently', () => {\n  const largeData = generateLargeDataset(1000);\n  const startTime = performance.now();\n  processData(largeData);\n  const duration = performance.now() - startTime;\n  expect(duration).toBeLessThan(1000); // Under 1 second\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running-the-improved-tests",children:"Running the Improved Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\nyarn test\n\n# Run specific improved test files\nyarn test create-vocabulary-sheet-improved.test.ts\nyarn test VocabularyTable-improved.test.tsx\nyarn test ElementReference-improved.test.tsx\nyarn test InLink-improved.test.tsx\nyarn test google-sheets-integration.test.ts\n\n# Run with coverage to see improvement\nyarn test --coverage\n"})}),"\n",(0,i.jsx)(n.h2,{id:"measuring-test-quality",children:"Measuring Test Quality"}),"\n",(0,i.jsx)(n.p,{children:"Good tests should:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fail when the implementation is broken"})," - Not just when mocks change"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pass when the implementation works"})," - Regardless of internal details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Be readable"})," - Clearly show what behavior is being tested"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Be maintainable"})," - Not break with minor refactoring"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Run fast"})," - But not at the expense of testing real behavior"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,i.jsx)(n.p,{children:"When improving existing tests:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Keep the original test file for reference"}),"\n",(0,i.jsxs)(n.li,{children:["Create a new ",(0,i.jsx)(n.code,{children:"-improved.test.ts"})," file"]}),"\n",(0,i.jsx)(n.li,{children:"Focus on testing actual logic, not mocks"}),"\n",(0,i.jsx)(n.li,{children:"Add edge cases and error scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Test integration between components"}),"\n",(0,i.jsx)(n.li,{children:"Once validated, replace the original test file"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(36672);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);